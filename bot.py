import os
import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# API –∫–ª—é—á–∏
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY')
EXCHANGE_API_KEY = os.environ.get('EXCHANGE_API_KEY')
ANIMALS_API_KEY =  os.environ.get('ANIMALS_API_KEY')
BOT_TOKEN = os.environ.get('BOT_TOKEN')


class WeatherState(StatesGroup):
    city = State()


class ExchangeState(StatesGroup):
    currency = State()


class CreatePoll(StatesGroup):
    poll_name = State()
    poll_options = State()
    chat_id = State()


# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=os.environ.get('BOT_TOKEN'))
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot,
                storage=storage)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text='–ü–æ–≥–æ–¥–∞ üå¶', callback_data='weather'),
        types.KeyboardButton(text='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üí∞', callback_data='/currency_converter'),
        types.KeyboardButton(text='–ú–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ üê∂', callback_data='/cute_animals'),
        types.KeyboardButton(text='–û–ø—Ä–æ—Å—ã üìä', callback_data='/surveys')
    ]
    keyboard.add(*buttons)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)


@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    """
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
    help_text += "/start - –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
    help_text += "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
    help_text += "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
    help_text += "/currency_converter <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–∏–∑ –≤–∞–ª—é—Ç—ã> to <–≤ –≤–∞–ª—é—Ç—É> - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É\n"
    help_text += "/cute_animals - –ü–æ–ª—É—á–∏—Ç—å –º–∏–ª—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ\n"
    help_text += "/survey –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n"
    await message.answer(help_text)


@dp.message_handler(commands=['weather'])
@dp.message_handler(lambda message: message.text == '–ü–æ–≥–æ–¥–∞ üå¶')
async def weather(message: types.Message):
    await message.answer('–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?')
    await WeatherState.city.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
@dp.message_handler(state=WeatherState.city)
async def get_weather(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    city = message.text
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    response = requests.get(url).json()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    if response['cod'] == 200:
        description = response['weather'][0]['description']
        temperature = response['main']['temp']
        feels_like = response['main']['feels_like']
        humidity = response['main']['humidity']
        wind_speed = response['wind']['speed']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
        await message.answer(
            f'–°–µ–π—á–∞—Å –≤ {city} {description}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C.\n'
            f'–í–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind_speed} –º/—Å.')
    else:
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}.')
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
@dp.message_handler(commands=['currency_converter'])
@dp.message_handler(lambda message: message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üí∞')
async def handle_convert(message: types.Message):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n <—Å—É–º–º–∞> <–í–∞–ª—é—Ç–∞1> <–í–∞–ª—é—Ç–∞2> ')
    await ExchangeState.currency.set()


@dp.message_handler(state=ExchangeState.currency)
async def convert_currency(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text == '–ú–µ–Ω—é':
        await state.finish()
        return

    try:
        amount, from_currency, to_currency = message.text.split()
    except ValueError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.reply(
            """
            –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '<—Å—É–º–º–∞> <–í–∞–ª—é—Ç–∞1> <–í–∞–ª—é—Ç–∞2>'.
            \n–î–ª—è –≤—ã—Ö–æ–¥–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ: \n–ú–µ–Ω—é
            """)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    try:
        amount = float(amount)
    except ValueError:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –ø–æ API
    headers = {"apikey": EXCHANGE_API_KEY}
    url = f"https://api.apilayer.com/exchangerates_data/convert?to={to_currency}&from={from_currency}&amount={amount}"
    response = requests.request("GET", url, headers=headers)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    if response.status_code != 200:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
        return
    data = response.json()
    try:
        rate = data["info"]["rate"]
    except KeyError:
        await message.reply(f"–í–∞–ª—é—Ç–∞ {to_currency.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    converted_amount = round(amount * rate, 2)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    result = f"{amount} {from_currency.upper()} = {converted_amount} {to_currency.upper()}"
    await message.reply(result)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.message_handler(commands=['cute_animals'])
@dp.message_handler(lambda message: message.text == '–ú–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ üê∂')
async def send_random_animal_image(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        response = requests.get(f"https://api.unsplash.com/photos/random",
                                params={"query": "animal", "orientation": "portrait"},
                                headers={"Authorization": f"Client-ID {ANIMALS_API_KEY}"})
        response.raise_for_status()
        data = response.json()

        # –ü–æ–ª—É—á–∞–µ–º URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        image_url = data["urls"]["regular"]
        await bot.send_photo(message.chat.id, photo=image_url)

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # logging.exception(e)
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É :(")


@dp.message_handler(commands=['survey'])
@dp.message_handler(lambda message: message.text == '–û–ø—Ä–æ—Å—ã üìä')
async def create_poll(message: types.Message, state: FSMContext):
    if message.chat.type != types.ChatType.GROUP:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å:")
        await CreatePoll.chat_id.set()
    else:
        async with state.proxy() as data:
            data['chat_id'] = message.chat.id
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")
        await CreatePoll.poll_name.set()


@dp.message_handler(state=CreatePoll.chat_id)
async def process_chat_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['chat_id'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")
    await CreatePoll.poll_name.set()


@dp.message_handler(state=CreatePoll.poll_name)
async def process_poll_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['poll_name'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ), —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–Ω–∞–∫–æ–º ';':")
    await CreatePoll.next()


@dp.message_handler(state=CreatePoll.poll_options)
async def process_poll_options(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['poll_options'] = message.text.split(';')
        poll_name = data['poll_name']
        poll_options = data['poll_options']
    try:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É
        await bot.send_poll(chat_id=data['chat_id'],
                            question=poll_name,
                            options=poll_options)
        await message.answer("–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        print(e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å :(")

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
